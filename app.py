import os
import sys
import streamlit as st
import logging

# Add the current directory to Python path to ensure imports work correctly
current_dir = os.path.dirname(os.path.abspath(__file__))
if current_dir not in sys.path:
    sys.path.append(current_dir)

from attached_assets.auth import init_auth, login_form, logout
from utils.styling import apply_custom_styling
from utils.database import Database

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Page configuration
st.set_page_config(
    page_title="Akhand Data Dashboard",
    page_icon="ЁЯУК",
    layout="wide"  # Use wide layout for a better dashboard feel
)

# Apply custom CSS styling
apply_custom_styling()

# Hide Streamlit's default branding
hide_st_style = """
<style>
._profileContainer_gzau3_53 {visibility: hidden!important;}
._link_gzau3_10  {visibility: hidden!important;}
.st-emotion-cache-15wzwg4 .e1d5ycv517  {visibility: hidden!important;}
.st-emotion-cache-q16mip .e1i26tt71  {visibility: hidden!important;}
</style>
"""
st.markdown(hide_st_style, unsafe_allow_html=True)

# Initialize session state for authentication
init_auth()

def main():
    """
    The main function that runs the Streamlit application.
    It handles authentication and displays the appropriate view (login page or dashboard).
    """
    # If user is authenticated, show the main dashboard
    if st.session_state.get('authenticated', False):
        db = Database()

        # --- Header with Title and Logout Button ---
        col_header1, col_header2 = st.columns([5, 1])
        with col_header1:
            st.title("ЁЯУК Akhand Data ржбрзНржпрж╛рж╢ржмрзЛрж░рзНржб")
            st.markdown("ржЖржкржирж╛рж░ ржбрж╛ржЯрж╛ ржорзНржпрж╛ржирзЗржЬржорзЗржирзНржЯ ржПржмржВ ржмрж┐рж╢рзНрж▓рзЗрж╖ржгрзЗрж░ ржЬржирзНржп ржПржХржЯрж┐ рж╕ржоржирзНржмрж┐ржд ржкрзНрж▓рзНржпрж╛ржЯржлрж░рзНржоред")
        with col_header2:
            if st.button("тмЕя╕П рж▓ржЧ ржЖржЙржЯ", use_container_width=True):
                logout()
                st.rerun()

        st.markdown("---")

        # --- Key Performance Indicators (KPIs) ---
        st.subheader("ржПржХ ржиржЬрж░рзЗ ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг ржкрж░рж┐рж╕ржВржЦрзНржпрж╛ржи")
        
        # Fetch dashboard statistics from the database
        stats = db.get_dashboard_stats()
        
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric(label="ЁЯУЭ ржорзЛржЯ рж░рзЗржХрж░рзНржб", value=stats.get('total_records', 0))
        with col2:
            st.metric(label="ЁЯЧВя╕П ржорзЛржЯ ржмрзНржпрж╛ржЪ", value=stats.get('total_batches', 0))
        with col3:
            st.metric(label="ЁЯдЭ ржмржирзНржзрзБ", value=stats.get('relationships', {}).get('Friend', 0))
        with col4:
            st.metric(label="тЪФя╕П рж╢рждрзНрж░рзБ", value=stats.get('relationships', {}).get('Enemy', 0))

        st.markdown("<br>", unsafe_allow_html=True)

        # --- Core Features / Navigation ---
        st.subheader("ржЕрзНржпрж╛ржкрзНрж▓рж┐ржХрзЗрж╢ржирзЗрж░ ржорзВрж▓ ржлрж┐ржЪрж╛рж░рж╕ржорзВрж╣")
        
        with st.container(border=True):
            col_nav1, col_nav2, col_nav3 = st.columns(3)
            with col_nav1:
                st.markdown("##### ЁЯУд ржбрж╛ржЯрж╛ ржорзНржпрж╛ржирзЗржЬржорзЗржирзНржЯ")
                st.markdown("""
                - **ржЖржкрж▓рзЛржб:** ржЯрзЗржХрзНрж╕ржЯ ржлрж╛ржЗрж▓ ржерзЗржХрзЗ рж╕рж╣ржЬрзЗржЗ ржбрж╛ржЯрж╛ ржЖржкрж▓рзЛржб ржХрж░рзБржиред
                - **рж╕ржорзНржкрж╛ржжржирж╛:** 'рж╕ржм рждржерзНржп' ржкрзЗржЬ ржерзЗржХрзЗ рж╕рж░рж╛рж╕рж░рж┐ ржбрж╛ржЯрж╛ ржкрж░рж┐ржмрж░рзНрждржи ржУ ржкрж░рж┐ржмрж░рзНржзржи ржХрж░рзБржиред
                - **рж░рзЗржХрж░рзНржб ржпрзЛржЧ:** ржорзНржпрж╛ржирзБржпрж╝рж╛рж▓рж┐ ржирждрзБржи рж░рзЗржХрж░рзНржб ржпрзЛржЧ ржХрж░рзБржиред
                """)
            with col_nav2:
                st.markdown("##### ЁЯФН ржЕржирзБрж╕ржирзНржзрж╛ржи ржПржмржВ ржлрж┐рж▓рзНржЯрж╛рж░рж┐ржВ")
                st.markdown("""
                - **рж╕рж╛рж░рзНржЪ:** ржирж╛ржо, ржнрзЛржЯрж╛рж░ ржиржВ, ржарж┐ржХрж╛ржирж╛рж╕рж╣ ржмрж┐ржнрж┐ржирзНржи ржлрж┐рж▓рзНржЯрж╛рж░ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржжрзНрж░рзБржд рждржерзНржп ржЦрзБржБржЬрзБржиред
                - **рж╕ржорзНржкрж╛ржжржирж╛ржпрзЛржЧрзНржп рж╕рж╛рж░рзНржЪ:** ржЕржирзБрж╕ржирзНржзрж╛ржирзЗрж░ ржлрж▓рж╛ржлрж▓ рж╕рж░рж╛рж╕рж░рж┐ рж╕ржорзНржкрж╛ржжржирж╛ ржХрж░рзБржиред
                - **ржЗржнрзЗржирзНржЯ ржлрж┐рж▓рзНржЯрж╛рж░:** ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржЗржнрзЗржирзНржЯрзЗрж░ рж╕рж╛ржерзЗ ржпрзБржХрзНржд ржмрзНржпржХрзНрждрж┐ржжрзЗрж░ рждрж╛рж▓рж┐ржХрж╛ ржжрзЗржЦрзБржиред
                """)
            with col_nav3:
                st.markdown("##### ЁЯУК ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржПржмржВ рж╕ржорзНржкрж░рзНржХ")
                st.markdown("""
                - **ржЕрзНржпрж╛ржирж╛рж▓рж╛ржЗрж╕рж┐рж╕:** ржкрзЗрж╢рж╛ржнрж┐рждрзНрждрж┐ржХ ржбрж╛ржЯрж╛ ржмрж┐рж╢рзНрж▓рзЗрж╖ржгрзЗрж░ ржорж╛ржзрзНржпржорзЗ ржорзВрж▓рзНржпржмрж╛ржи рждржерзНржп ржЬрж╛ржирзБржиред
                - **рж╕ржорзНржкрж░рзНржХ:** 'ржмржирзНржзрзБ', 'рж╢рждрзНрж░рзБ' ржПржмржВ 'рж╕ржВржпрзБржХрзНржд' рж╣рж┐рж╕рзЗржмрзЗ рж╕ржорзНржкрж░рзНржХ ржирж┐рж░рзНржзрж╛рж░ржг ржУ ржЯрзНрж░рзНржпрж╛ржХ ржХрж░рзБржиред
                - **рж╕рж╛рж░рж╕ржВржХрзНрж╖рзЗржк:** рж╕ржорзНржкрж░рзНржХ ржПржмржВ ржЕржирзНржпрж╛ржирзНржп ржкрж░рж┐рж╕ржВржЦрзНржпрж╛ржирзЗрж░ ржПржХржЯрж┐ ржнрж┐ржЬрзНржпрзБржпрж╝рж╛рж▓ ржЪрж┐рждрзНрж░ ржжрзЗржЦрзБржиред
                """)

    # If user is not authenticated, show the login form
    else:
        login_form()

if __name__ == "__main__":
    main()
