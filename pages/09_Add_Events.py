import streamlit as st
from utils.database import Database
from utils.styling import apply_custom_styling
import logging

logger = logging.getLogger(__name__)
apply_custom_styling()

def events_page():
    """
    Streamlit page for managing events.
    Allows adding, viewing, and deleting events.
    """
    if 'authenticated' not in st.session_state or not st.session_state.authenticated:
        st.warning("‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶≤‡¶ó‡¶á‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®")
        return

    st.title("üóìÔ∏è ‡¶á‡¶≠‡ßá‡¶®‡ßç‡¶ü ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶ú‡¶Æ‡ßá‡¶®‡ßç‡¶ü")

    db = Database()

    # --- Add New Event Section ---
    st.subheader("‚ûï ‡¶®‡¶§‡ßÅ‡¶® ‡¶á‡¶≠‡ßá‡¶®‡ßç‡¶ü ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®")
    with st.form("new_event_form", clear_on_submit=True):
        event_name = st.text_input("‡¶á‡¶≠‡ßá‡¶®‡ßç‡¶ü‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ", placeholder="‡¶Ø‡ßá‡¶Æ‡¶®: ‡¶¨‡¶æ‡¶∞‡ßç‡¶∑‡¶ø‡¶ï ‡¶∏‡¶Æ‡ßç‡¶Æ‡ßá‡¶≤‡¶® ‡ß®‡ß¶‡ß®‡ß®")
        submitted = st.form_submit_button("‡¶á‡¶≠‡ßá‡¶®‡ßç‡¶ü ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®")

        if submitted and event_name:
            try:
                db.add_event(event_name)
                st.success(f"‚úÖ ‡¶á‡¶≠‡ßá‡¶®‡ßç‡¶ü '{event_name}' ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")
            except Exception as e:
                logger.error(f"Error adding event: {e}")
                st.error("‡¶è‡¶á ‡¶®‡¶æ‡¶Æ‡ßá‡¶∞ ‡¶á‡¶≠‡ßá‡¶®‡ßç‡¶ü ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶¨‡¶ø‡¶¶‡ßç‡¶Ø‡¶Æ‡¶æ‡¶®‡•§")

    st.markdown("---")

    # --- Existing Events Section ---
    st.subheader("üìã ‡¶¨‡¶ø‡¶¶‡ßç‡¶Ø‡¶Æ‡¶æ‡¶® ‡¶á‡¶≠‡ßá‡¶®‡ßç‡¶ü ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ")
    
    try:
        all_events = db.get_all_events()

        if not all_events:
            st.info("‡¶è‡¶ñ‡¶®‡¶ì ‡¶ï‡ßã‡¶®‡ßã ‡¶á‡¶≠‡ßá‡¶®‡ßç‡¶ü ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡¶®‡¶ø‡•§")
            return

        # Display events in a list with delete buttons
        for event in all_events:
            col1, col2 = st.columns([4, 1])
            with col1:
                st.write(f"- **{event['name']}** (‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá: {event['created_at'].strftime('%Y-%m-%d')})")
            
            with col2:
                # Use a unique key for each delete button
                if st.button("üóëÔ∏è ‡¶Æ‡ßÅ‡¶õ‡ßÅ‡¶®", key=f"delete_{event['id']}", type="secondary"):
                    try:
                        db.delete_event(event['id'])
                        st.success(f"üóëÔ∏è ‡¶á‡¶≠‡ßá‡¶®‡ßç‡¶ü '{event['name']}' ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")
                        st.rerun() # Rerun to update the list
                    except Exception as e:
                        logger.error(f"Error deleting event {event['id']}: {e}")
                        st.error("‡¶á‡¶≠‡ßá‡¶®‡ßç‡¶ü‡¶ü‡¶ø ‡¶Æ‡ßÅ‡¶õ‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")

    except Exception as e:
        logger.error(f"Error fetching events: {e}")
        st.error("‡¶á‡¶≠‡ßá‡¶®‡ßç‡¶ü ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ ‡¶Ü‡¶®‡¶§‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")


if __name__ == "__main__":
    events_page()
