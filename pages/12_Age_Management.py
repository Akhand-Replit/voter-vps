import streamlit as st
import pandas as pd
import plotly.express as px
from utils.database import Database
from utils.styling import apply_custom_styling
from attached_assets.data_processor import calculate_age
import logging

logger = logging.getLogger(__name__)
apply_custom_styling()

def age_management_page():
    if 'authenticated' not in st.session_state or not st.session_state.authenticated:
        st.warning("ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржкрзНрж░ржержорзЗ рж▓ржЧржЗржи ржХрж░рзБржи")
        return

    st.title("ЁЯОВ ржмржпрж╝рж╕ ржорзНржпрж╛ржирзЗржЬржорзЗржирзНржЯ ржПржмржВ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг")
    st.markdown("ржПржЦрж╛ржирзЗ ржЖржкржирж┐ ржмрж┐ржжрзНржпржорж╛ржи рж░рзЗржХрж░рзНржбржЧрзБрж▓рж┐рж░ ржмржпрж╝рж╕ ржкрзБржирж░рж╛ржпрж╝ ржЧржгржирж╛ ржПржмржВ ржЖржкржбрзЗржЯ ржХрж░рждрзЗ ржкрж╛рж░рзЗржи ржПржмржВ ржмржпрж╝рж╕ ржмрж┐рждрж░ржг ржжрзЗржЦрждрзЗ ржкрж╛рж░рзЗржиред")

    db = Database()

    # --- Age Recalculation Section ---
    st.subheader("ржмржпрж╝рж╕ ржкрзБржирж░рж╛ржпрж╝ ржЧржгржирж╛ ржХрж░рзБржи")
    st.info("ржПржЗ ржмрзИрж╢рж┐рж╖рзНржЯрзНржпржЯрж┐ ржмрж┐ржжрзНржпржорж╛ржи рж╕ржорж╕рзНржд рж░рзЗржХрж░рзНржбрзЗрж░ ржЬржирзНржп ржЬржирзНржо рждрж╛рж░рж┐ржЦрзЗрж░ ржЙржкрж░ ржнрж┐рждрзНрждрж┐ ржХрж░рзЗ ржмржпрж╝рж╕ ржкрзБржирж░рж╛ржпрж╝ ржЧржгржирж╛ ржХрж░ржмрзЗ ржПржмржВ ржЖржкржбрзЗржЯ ржХрж░ржмрзЗред")

    if st.button("ЁЯФД рж╕ржорж╕рзНржд ржмржпрж╝рж╕ ржЖржкржбрзЗржЯ ржХрж░рзБржи", type="primary", use_container_width=True):
        try:
            with st.spinner("ржмржпрж╝рж╕ ржЖржкржбрзЗржЯ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ... ржПржЯрж┐ ржХрж┐ржЫрзБ рж╕ржоржпрж╝ ржирж┐рждрзЗ ржкрж╛рж░рзЗред"):
                records_to_update = db.get_all_records_with_dob()
                updated_count = 0
                
                # Start a transaction for bulk updates
                db.conn.autocommit = False 

                for record in records_to_update:
                    record_id = record['id']
                    dob_str = record['ржЬржирзНржо_рждрж╛рж░рж┐ржЦ']
                    new_age = calculate_age(dob_str)
                    
                    if new_age is not None:
                        db.update_record_age(record_id, new_age)
                        updated_count += 1
                
                db.commit_changes() # Commit all updates at once
                st.success(f"тЬЕ рж╕ржлрж▓ржнрж╛ржмрзЗ {updated_count} ржЯрж┐ рж░рзЗржХрж░рзНржбрзЗрж░ ржмржпрж╝рж╕ ржЖржкржбрзЗржЯ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ!")
                st.rerun() # Rerun to refresh the page and stats
        except Exception as e:
            db.rollback_changes() # Rollback on error
            logger.error(f"Error updating all ages: {e}")
            st.error(f"ржмржпрж╝рж╕ ржЖржкржбрзЗржЯ ржХрж░рж╛рж░ рж╕ржоржпрж╝ ржПржХржЯрж┐ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗ: {str(e)}")

    st.markdown("---")

    # --- Age Distribution Analysis ---
    st.subheader("ржмржпрж╝рж╕ ржЕржирзБржпрж╛ржпрж╝рзА ржмрж┐рждрж░ржг")

    # Fetch age distribution from dashboard stats
    dashboard_stats = db.get_dashboard_stats()
    age_distribution_data = dashboard_stats.get('age_distribution', [])

    if age_distribution_data:
        df_age = pd.DataFrame(age_distribution_data)
        
        # Sort age groups for better visualization
        # Handle 'Unknown' or other non-numeric labels for sorting
        df_age['age_group_sort_key'] = df_age['age_group'].apply(lambda x: int(x.split('-')[0]) if x != 'Unknown' else -1)
        df_age = df_age.sort_values('age_group_sort_key')


        fig_age = px.bar(
            df_age,
            x='age_group',
            y='count',
            title="ржмржпрж╝рж╕ ржЧрзНрж░рзБржк ржЕржирзБржпрж╛ржпрж╝рзА рж░рзЗржХрж░рзНржб ржмрж┐рждрж░ржг",
            labels={'age_group': 'ржмржпрж╝рж╕ ржЧрзНрж░рзБржк', 'count': 'рж╕ржВржЦрзНржпрж╛'}
        )
        fig_age.update_layout(
            font=dict(family="Noto Sans Bengali"),
            height=500
        )
        st.plotly_chart(fig_age, use_container_width=True)

        st.markdown("##### ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржмржпрж╝рж╕ ржкрж░рж┐рж╕ржВржЦрзНржпрж╛ржи")
        st.dataframe(
            df_age[['age_group', 'count']].rename(columns={'age_group': 'ржмржпрж╝рж╕ ржЧрзНрж░рзБржк', 'count': 'рж╕ржВржЦрзНржпрж╛'}),
            hide_index=True,
            use_container_width=True
        )
    else:
        st.info("ржмржпрж╝рж╕ ржмрж┐рж╢рзНрж▓рзЗрж╖ржгрзЗрж░ ржЬржирзНржп ржХрзЛржи ржбрж╛ржЯрж╛ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржкрзНрж░ржержорзЗ рж░рзЗржХрж░рзНржб ржЖржкрж▓рзЛржб ржХрж░рзБржи ржмрж╛ ржмржпрж╝рж╕ ржЖржкржбрзЗржЯ ржХрж░рзБржиред")

if __name__ == "__main__":
    age_management_page()
