import streamlit as st
import pandas as pd
from utils.database import Database
from utils.styling import apply_custom_styling
import logging

logger = logging.getLogger(__name__)
apply_custom_styling()

def editable_search_page():
    """
    A search page where the results are displayed in editable cards,
    allowing direct modification of record data and event assignments.
    """
    if 'authenticated' not in st.session_state or not st.session_state.authenticated:
        st.warning("‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶≤‡¶ó‡¶á‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®")
        return

    st.title("‚úèÔ∏è ‡¶§‡¶•‡ßç‡¶Ø ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶∏‡¶Æ‡ßç‡¶™‡¶æ‡¶¶‡¶®‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®")
    st.markdown("‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ü‡¶™‡¶®‡¶ø ‡¶§‡¶•‡ßç‡¶Ø ‡¶Ö‡¶®‡ßÅ‡¶∏‡¶®‡ßç‡¶ß‡¶æ‡¶® ‡¶ï‡¶∞‡¶§‡ßá ‡¶è‡¶¨‡¶Ç ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø ‡¶´‡¶≤‡¶æ‡¶´‡¶≤ ‡¶∏‡¶Æ‡ßç‡¶™‡¶æ‡¶¶‡¶®‡¶æ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®‡•§")

    db = Database()

    # --- Search UI ---
    with st.container(border=True):
        st.subheader("‡¶Ö‡¶®‡ßÅ‡¶∏‡¶®‡ßç‡¶ß‡¶æ‡¶® ‡¶´‡¶ø‡¶≤‡ßç‡¶ü‡¶æ‡¶∞")
        col1, col2 = st.columns(2)
        with col1:
            name = st.text_input("‡¶®‡¶æ‡¶Æ")
            fathers_name = st.text_input("‡¶™‡¶ø‡¶§‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ")
            phone_number = st.text_input("‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞")
        with col2:
            voter_no = st.text_input("‡¶≠‡ßã‡¶ü‡¶æ‡¶∞ ‡¶®‡¶Ç")
            address = st.text_input("‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ")
            si_number = st.text_input("‡¶ï‡ßç‡¶∞‡¶Æ‡¶ø‡¶ï ‡¶®‡¶Ç")

    if st.button("üîç ‡¶Ö‡¶®‡ßÅ‡¶∏‡¶®‡ßç‡¶ß‡¶æ‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®", type="primary", use_container_width=True):
        search_criteria = {
            '‡¶®‡¶æ‡¶Æ': name,
            '‡¶™‡¶ø‡¶§‡¶æ‡¶∞_‡¶®‡¶æ‡¶Æ': fathers_name,
            'phone_number': phone_number,
            '‡¶≠‡ßã‡¶ü‡¶æ‡¶∞_‡¶®‡¶Ç': voter_no,
            '‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ': address,
            '‡¶ï‡ßç‡¶∞‡¶Æ‡¶ø‡¶ï_‡¶®‡¶Ç': si_number,
        }
        # Remove empty criteria to search only with provided values
        search_criteria = {k: v for k, v in search_criteria.items() if v}

        if not search_criteria:
            st.warning("‡¶Ö‡¶®‡ßÅ‡¶∏‡¶®‡ßç‡¶ß‡¶æ‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ö‡¶®‡ßç‡¶§‡¶§ ‡¶è‡¶ï‡¶ü‡¶ø ‡¶´‡¶ø‡¶≤‡ßç‡¶ü‡¶æ‡¶∞ ‡¶™‡ßÇ‡¶∞‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
            return

        try:
            with st.spinner("‡¶Ö‡¶®‡ßÅ‡¶∏‡¶®‡ßç‡¶ß‡¶æ‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá..."):
                results = db.search_records_advanced(search_criteria)
            
            st.session_state.search_results = results
            if not results:
                st.info("‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶∏‡¶®‡ßç‡¶ß‡¶æ‡¶®‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Æ‡ßá‡¶≤‡ßá ‡¶è‡¶Æ‡¶® ‡¶ï‡ßã‡¶®‡ßã ‡¶´‡¶≤‡¶æ‡¶´‡¶≤ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§")

        except Exception as e:
            logger.error(f"Search error: {str(e)}")
            st.error(f"‡¶Ö‡¶®‡ßÅ‡¶∏‡¶®‡ßç‡¶ß‡¶æ‡¶®‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá: {str(e)}")

    # --- Display Search Results ---
    if 'search_results' in st.session_state and st.session_state.search_results:
        st.markdown("---")
        st.subheader(f"‡¶Ö‡¶®‡ßÅ‡¶∏‡¶®‡ßç‡¶ß‡¶æ‡¶®‡ßá‡¶∞ ‡¶´‡¶≤‡¶æ‡¶´‡¶≤ ({len(st.session_state.search_results)} ‡¶ü‡¶ø)")

        all_events = db.get_all_events()
        event_map = {event['name']: event['id'] for event in all_events}

        for record in st.session_state.search_results:
            with st.expander(f"**{record['‡¶®‡¶æ‡¶Æ']}** (‡¶ï‡ßç‡¶∞‡¶Æ‡¶ø‡¶ï ‡¶®‡¶Ç: {record['‡¶ï‡ßç‡¶∞‡¶Æ‡¶ø‡¶ï_‡¶®‡¶Ç']})"):
                
                # Create a unique key for each form to isolate its state
                form_key = f"form_{record['id']}"
                with st.form(key=form_key):
                    st.markdown(f"#### ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶° ‡¶Ü‡¶á‡¶°‡¶ø: {record['id']}")
                    
                    c1, c2 = st.columns(2)
                    with c1:
                        # Editable fields
                        edited_name = st.text_input("‡¶®‡¶æ‡¶Æ", value=record.get('‡¶®‡¶æ‡¶Æ', ''), key=f"name_{record['id']}")
                        edited_father = st.text_input("‡¶™‡¶ø‡¶§‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ", value=record.get('‡¶™‡¶ø‡¶§‡¶æ‡¶∞_‡¶®‡¶æ‡¶Æ', ''), key=f"father_{record['id']}")
                        edited_mother = st.text_input("‡¶Æ‡¶æ‡¶§‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ", value=record.get('‡¶Æ‡¶æ‡¶§‡¶æ‡¶∞_‡¶®‡¶æ‡¶Æ', ''), key=f"mother_{record['id']}")
                        edited_voter_no = st.text_input("‡¶≠‡ßã‡¶ü‡¶æ‡¶∞ ‡¶®‡¶Ç", value=record.get('‡¶≠‡ßã‡¶ü‡¶æ‡¶∞_‡¶®‡¶Ç', ''), key=f"voter_{record['id']}")
                        edited_phone = st.text_input("‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞", value=record.get('phone_number', ''), key=f"phone_{record['id']}")
                        edited_fb = st.text_input("‡¶´‡ßá‡¶∏‡¶¨‡ßÅ‡¶ï ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï", value=record.get('facebook_link', ''), key=f"fb_{record['id']}")

                    with c2:
                        edited_si = st.text_input("‡¶ï‡ßç‡¶∞‡¶Æ‡¶ø‡¶ï ‡¶®‡¶Ç", value=record.get('‡¶ï‡ßç‡¶∞‡¶Æ‡¶ø‡¶ï_‡¶®‡¶Ç', ''), key=f"si_{record['id']}")
                        edited_occupation = st.text_input("‡¶™‡ßá‡¶∂‡¶æ", value=record.get('‡¶™‡ßá‡¶∂‡¶æ', ''), key=f"occupation_{record['id']}")
                        edited_dob = st.text_input("‡¶ú‡¶®‡ßç‡¶Æ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ", value=record.get('‡¶ú‡¶®‡ßç‡¶Æ_‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ', ''), key=f"dob_{record['id']}")
                        edited_address = st.text_area("‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ", value=record.get('‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ', ''), key=f"address_{record['id']}")
                        edited_photo = st.text_input("‡¶õ‡¶¨‡¶ø‡¶∞ ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï", value=record.get('photo_link', ''), key=f"photo_{record['id']}")

                    edited_description = st.text_area("‡¶¨‡¶ø‡¶¨‡¶∞‡¶£", value=record.get('description', ''), key=f"desc_{record['id']}")
                    
                    st.markdown("---")
                    
                    # Relationship and Event assignment
                    rel_col, event_col = st.columns(2)
                    with rel_col:
                        edited_relationship = st.selectbox(
                            "‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡ßá‡¶∞ ‡¶ß‡¶∞‡¶£",
                            options=['Regular', 'Friend', 'Enemy', 'Connected'],
                            index=['Regular', 'Friend', 'Enemy', 'Connected'].index(record.get('relationship_status', 'Regular')),
                            key=f"rel_{record['id']}"
                        )
                    with event_col:
                        assigned_events = db.get_events_for_record(record['id'])
                        selected_events = st.multiselect(
                            "‡¶á‡¶≠‡ßá‡¶®‡ßç‡¶ü ‡¶®‡¶ø‡¶∞‡ßç‡¶ß‡¶æ‡¶∞‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶®",
                            options=event_map.keys(),
                            default=assigned_events,
                            key=f"events_{record['id']}"
                        )

                    # Submit button for the form
                    if st.form_submit_button("üíæ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶®", type="primary"):
                        try:
                            # 1. Update Record Details
                            updated_data = {
                                '‡¶ï‡ßç‡¶∞‡¶Æ‡¶ø‡¶ï_‡¶®‡¶Ç': edited_si, '‡¶®‡¶æ‡¶Æ': edited_name, '‡¶≠‡ßã‡¶ü‡¶æ‡¶∞_‡¶®‡¶Ç': edited_voter_no,
                                '‡¶™‡¶ø‡¶§‡¶æ‡¶∞_‡¶®‡¶æ‡¶Æ': edited_father, '‡¶Æ‡¶æ‡¶§‡¶æ‡¶∞_‡¶®‡¶æ‡¶Æ': edited_mother, '‡¶™‡ßá‡¶∂‡¶æ': edited_occupation,
                                '‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ': edited_address, '‡¶ú‡¶®‡ßç‡¶Æ_‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ': edited_dob, 'phone_number': edited_phone,
                                'facebook_link': edited_fb, 'photo_link': edited_photo, 'description': edited_description,
                                'relationship_status': edited_relationship
                            }
                            db.update_record(record['id'], updated_data)

                            # 2. Update Event Assignments
                            selected_event_ids = [event_map[name] for name in selected_events]
                            db.assign_events_to_record(record['id'], selected_event_ids)

                            st.success(f"‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶° '{record['‡¶®‡¶æ‡¶Æ']}' ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")
                            # Clear results to allow a new search
                            st.session_state.search_results = []
                            st.rerun()

                        except Exception as e:
                            logger.error(f"Update failed for record {record['id']}: {e}")
                            st.error("‡¶§‡¶•‡ßç‡¶Ø ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")

if __name__ == "__main__":
    editable_search_page()
