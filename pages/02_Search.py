import streamlit as st
import pandas as pd
from utils.database import Database
from utils.styling import apply_custom_styling
import logging

logger = logging.getLogger(__name__)
apply_custom_styling()

def display_result_card(result, db):
    """
    Displays a single search result in a well-formatted card.
    Uses st.container with a border for a clean, modern look.
    """
    # Use a container with a border for each card
    with st.container(border=True):
        # Header with name and serial number
        col1, col2 = st.columns([3, 1])
        with col1:
            st.markdown(f"### {result.get('‡¶®‡¶æ‡¶Æ', 'N/A')}")
        with col2:
            st.markdown(f"**‡¶ï‡ßç‡¶∞‡¶Æ‡¶ø‡¶ï ‡¶®‡¶Ç:** {result.get('‡¶ï‡ßç‡¶∞‡¶Æ‡¶ø‡¶ï_‡¶®‡¶Ç', 'N/A')}")

        # Location info (Batch and File)
        batch_info = db.get_batch_by_id(result['batch_id'])
        location_str = batch_info['name'] if batch_info else "Unknown Batch"
        if result.get('file_name'):
            location_str += f" / {result['file_name']}"
        st.markdown(f"üìç **‡¶∏‡ßç‡¶•‡¶æ‡¶®:** {location_str}")

        st.markdown("---")

        # Main details in two columns for better organization
        col3, col4 = st.columns(2)
        with col3:
            st.markdown(f"**‡¶≠‡ßã‡¶ü‡¶æ‡¶∞ ‡¶®‡¶Ç:** {result.get('‡¶≠‡ßã‡¶ü‡¶æ‡¶∞_‡¶®‡¶Ç', 'N/A')}")
            st.markdown(f"**‡¶™‡¶ø‡¶§‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ:** {result.get('‡¶™‡¶ø‡¶§‡¶æ‡¶∞_‡¶®‡¶æ‡¶Æ', 'N/A')}")
            st.markdown(f"**‡¶Æ‡¶æ‡¶§‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ:** {result.get('‡¶Æ‡¶æ‡¶§‡¶æ‡¶∞_‡¶®‡¶æ‡¶Æ', 'N/A')}")
            st.markdown(f"**‡¶™‡ßá‡¶∂‡¶æ:** {result.get('‡¶™‡ßá‡¶∂‡¶æ', 'N/A')}")
            st.markdown(f"**Occupation Details:** {result.get('occupation_details', 'N/A')}")
        with col4:
            st.markdown(f"**‡¶ú‡¶®‡ßç‡¶Æ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ:** {result.get('‡¶ú‡¶®‡ßç‡¶Æ_‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ', 'N/A')}")
            st.markdown(f"**‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ:** {result.get('‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ', 'N/A')}")
            st.markdown(f"**‡¶≤‡¶ø‡¶ô‡ßç‡¶ó:** {result.get('gender', 'N/A')}") # Display gender
            st.markdown(f"**‡¶¨‡¶Ø‡¶º‡¶∏:** {result.get('age', 'N/A')}") # Display age
            st.markdown(f"**Political Status:** {result.get('political_status', 'N/A')}")

        st.markdown("---")

        # Contact and social media
        st.markdown(f"**‡¶´‡ßã‡¶® ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞:** {result.get('phone_number', 'N/A')}")
        if result.get('whatsapp_number'):
            st.markdown(f"**Whatsapp:** [Link]({result.get('whatsapp_number')})")
        if result.get('facebook_link'):
            st.markdown(f"**‡¶´‡ßá‡¶∏‡¶¨‡ßÅ‡¶ï:** [Link]({result.get('facebook_link')})")
        if result.get('tiktok_link'):
            st.markdown(f"**Tiktok:** [Link]({result.get('tiktok_link')})")
        if result.get('youtube_link'):
            st.markdown(f"**Youtube:** [Link]({result.get('youtube_link')})")
        if result.get('insta_link'):
            st.markdown(f"**Instagram:** [Link]({result.get('insta_link')})")

        # Display assigned events
        events_list = result.get('events', [])
        if events_list:
            st.markdown(f"**‡¶®‡¶ø‡¶∞‡ßç‡¶ß‡¶æ‡¶∞‡¶ø‡¶§ ‡¶á‡¶≠‡ßá‡¶®‡ßç‡¶ü‡¶∏:** {', '.join(events_list)}")
        else:
            st.markdown("**‡¶®‡¶ø‡¶∞‡ßç‡¶ß‡¶æ‡¶∞‡¶ø‡¶§ ‡¶á‡¶≠‡ßá‡¶®‡ßç‡¶ü‡¶∏:** N/A")

        # Display relationship status
        st.markdown(f"**‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡ßá‡¶∞ ‡¶ß‡¶∞‡¶£:** {result.get('relationship_status', 'N/A')}")


def search_page():
    """
    The main function for the search page.
    Provides input fields for searching and displays results.
    """
    if 'authenticated' not in st.session_state or not st.session_state.authenticated:
        st.warning("‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶≤‡¶ó‡¶á‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®")
        return

    st.title("üîç ‡¶§‡¶•‡ßç‡¶Ø ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßÅ‡¶®")

    db = Database()

    # Search fields within a container for better layout
    with st.container(border=True):
        col1, col2 = st.columns(2)
        with col1:
            si_number = st.text_input("‡¶ï‡ßç‡¶∞‡¶Æ‡¶ø‡¶ï ‡¶®‡¶Ç")
            name = st.text_input("‡¶®‡¶æ‡¶Æ")
            mothers_name = st.text_input("‡¶Æ‡¶æ‡¶§‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ")
            date_of_birth = st.text_input("‡¶ú‡¶®‡ßç‡¶Æ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ")
        with col2:
            voter_no = st.text_input("‡¶≠‡ßã‡¶ü‡¶æ‡¶∞ ‡¶®‡¶Ç")
            fathers_name = st.text_input("‡¶™‡¶ø‡¶§‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ")
            occupation = st.text_input("‡¶™‡ßá‡¶∂‡¶æ")
            address = st.text_input("‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ")
            gender = st.selectbox("‡¶≤‡¶ø‡¶ô‡ßç‡¶ó", options=['‡¶∏‡¶¨', 'Male', 'Female', 'Other']) # Gender search filter
            
    # Search button
    if st.button("‡¶Ö‡¶®‡ßÅ‡¶∏‡¶®‡ßç‡¶ß‡¶æ‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®", type="primary", use_container_width=True):
        try:
            with st.spinner("‡¶Ö‡¶®‡ßÅ‡¶∏‡¶®‡ßç‡¶ß‡¶æ‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá..."):
                search_criteria = {
                    '‡¶ï‡ßç‡¶∞‡¶Æ‡¶ø‡¶ï_‡¶®‡¶Ç': si_number,
                    '‡¶≠‡ßã‡¶ü‡¶æ‡¶∞_‡¶®‡¶Ç': voter_no,
                    '‡¶®‡¶æ‡¶Æ': name,
                    '‡¶™‡¶ø‡¶§‡¶æ‡¶∞_‡¶®‡¶æ‡¶Æ': fathers_name,
                    '‡¶Æ‡¶æ‡¶§‡¶æ‡¶∞_‡¶®‡¶æ‡¶Æ': mothers_name,
                    '‡¶™‡ßá‡¶∂‡¶æ': occupation,
                    '‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ': address,
                    '‡¶ú‡¶®‡ßç‡¶Æ_‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ': date_of_birth,
                    'gender': gender # Include gender in search criteria
                }
                # Remove empty criteria to avoid searching on empty strings, but keep 'gender' if '‡¶∏‡¶¨' is selected
                search_criteria = {k: v for k, v in search_criteria.items() if v or k == 'gender'}
                
                if not search_criteria or (len(search_criteria) == 1 and 'gender' in search_criteria and search_criteria['gender'] == '‡¶∏‡¶¨'):
                    st.warning("‡¶Ö‡¶®‡ßÅ‡¶∏‡¶®‡ßç‡¶ß‡¶æ‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ö‡¶®‡ßç‡¶§‡¶§ ‡¶è‡¶ï‡¶ü‡¶ø ‡¶´‡¶ø‡¶≤‡ßç‡¶ü‡¶æ‡¶∞ ‡¶™‡ßÇ‡¶∞‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
                    return

                results = db.search_records_advanced(search_criteria)

                if results:
                    st.success(f"{len(results)}‡¶ü‡¶ø ‡¶´‡¶≤‡¶æ‡¶´‡¶≤ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶ó‡ßá‡¶õ‡ßá")
                    # Display results in the improved card format
                    for result in results:
                        display_result_card(result, db)
                else:
                    st.info("‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶∏‡¶®‡ßç‡¶ß‡¶æ‡¶®‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Æ‡ßá‡¶≤‡ßá ‡¶è‡¶Æ‡¶® ‡¶ï‡ßã‡¶®‡ßã ‡¶´‡¶≤‡¶æ‡¶´‡¶≤ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§")

        except Exception as e:
            logger.error(f"Search error: {str(e)}")
            st.error(f"‡¶Ö‡¶®‡ßÅ‡¶∏‡¶®‡ßç‡¶ß‡¶æ‡¶®‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá: {str(e)}")

if __name__ == "__main__":
    search_page()
