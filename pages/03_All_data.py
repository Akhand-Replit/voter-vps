import streamlit as st
import pandas as pd
import numpy as np
from utils.database import Database
from utils.styling import apply_custom_styling
import logging

logger = logging.getLogger(__name__)
apply_custom_styling()

def all_data_page():
    if 'authenticated' not in st.session_state or not st.session_state.authenticated:
        st.warning("ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржкрзНрж░ржержорзЗ рж▓ржЧржЗржи ржХрж░рзБржи")
        return

    st.title("ЁЯУБ рж╕ржм рждржерзНржп")

    db = Database()
    batches = db.get_all_batches()

    if not batches:
        st.info("ржХрзЛржи ржбрж╛ржЯрж╛ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐")
        
        # Option to clear entire database even if no batches exist
        st.markdown("---")
        st.subheader("ржбрзЗржЯрж╛ржмрзЗрж╕ ржорзНржпрж╛ржирзЗржЬржорзЗржирзНржЯ")
        if st.button("ЁЯФ┤ рж╕ржорзНржкрзВрж░рзНржг ржбрж╛ржЯрж╛ржмрзЗрж╕ ржорзБржЫрзЗ ржлрзЗрж▓рзБржи (рж╕рж╛ржмржзрж╛ржи!)", type="secondary", use_container_width=True):
            if st.session_state.get('confirm_clear_db', False):
                try:
                    # Delete all records first (which will also delete record_events due to CASCADE)
                    with db.conn.cursor() as cur:
                        cur.execute("DELETE FROM records")
                        cur.execute("DELETE FROM batches")
                        cur.execute("DELETE FROM events")
                    db.conn.commit()
                    st.success("тЬЕ рж╕ржорзНржкрзВрж░рзНржг ржбрж╛ржЯрж╛ржмрзЗрж╕ рж╕ржлрж▓ржнрж╛ржмрзЗ ржорзБржЫрзЗ ржлрзЗрж▓рж╛ рж╣ржпрж╝рзЗржЫрзЗ!")
                    st.session_state.pop('confirm_clear_db', None) # Reset confirmation
                    st.rerun()
                except Exception as e:
                    logger.error(f"Error clearing database: {str(e)}")
                    st.error(f"ржбрж╛ржЯрж╛ржмрзЗрж╕ ржорзБржЫрзЗ ржлрзЗрж▓рж╛рж░ рж╕ржоржпрж╝ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗ: {str(e)}")
            else:
                st.warning("ржЖржкржирж┐ ржХрж┐ ржирж┐рж╢рзНржЪрж┐ржд ржпрзЗ ржЖржкржирж┐ рж╕ржорзНржкрзВрж░рзНржг ржбрж╛ржЯрж╛ржмрзЗрж╕ ржорзБржЫрзЗ ржлрзЗрж▓рждрзЗ ржЪрж╛ржи? ржПржЗ ржХрзНрж░рж┐ржпрж╝рж╛ржЯрж┐ ржЕржкрж░рж┐ржмрж░рзНрждржирзАржпрж╝ред")
                st.session_state.confirm_clear_db = True
                st.button("рж╣рзНржпрж╛ржБ, ржЖржорж┐ ржирж┐рж╢рзНржЪрж┐ржд (рж╕ржорзНржкрзВрж░рзНржг ржорзБржЫрзЗ ржлрзЗрж▓рзБржи)", type="danger", key="confirm_clear_db_btn")
        
        return

    # --- Batch and File Selection ---
    selected_batch_name = st.selectbox(
        "ржмрзНржпрж╛ржЪ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи",
        options=[batch['name'] for batch in batches],
        format_func=lambda x: f"ржмрзНржпрж╛ржЪ: {x}"
    )
    
    selected_batch_id = next(b['id'] for b in batches if b['name'] == selected_batch_name)
    files = db.get_batch_files(selected_batch_id)

    if not files:
        st.info("ржПржЗ ржмрзНржпрж╛ржЪрзЗ ржХрзЛржи ржлрж╛ржЗрж▓ ржирзЗржЗ")
        # Allow creating a dummy file for new records if batch is empty
        if st.button("ржПржЗ ржмрзНржпрж╛ржЪрзЗ ржирждрзБржи рж░рзЗржХрж░рзНржб ржпрзЛржЧ ржХрж░рж╛рж░ ржЬржирзНржп ржлрж╛ржЗрж▓ рждрзИрж░рж┐ ржХрж░рзБржи"):
            db.add_record(selected_batch_id, "initial_records.txt", {'ржирж╛ржо': 'dummy'})
            st.rerun()
        
        # Add delete batch option even if no files in batch
        st.markdown("---")
        st.subheader("ржмрзНржпрж╛ржЪ ржорзНржпрж╛ржирзЗржЬржорзЗржирзНржЯ")
        if st.button(f"ЁЯЧСя╕П '{selected_batch_name}' ржмрзНржпрж╛ржЪ ржорзБржЫрзЗ ржлрзЗрж▓рзБржи", type="secondary", use_container_width=True):
            if st.session_state.get(f'confirm_delete_batch_{selected_batch_id}', False):
                try:
                    db.delete_batch(selected_batch_id)
                    st.success(f"тЬЕ ржмрзНржпрж╛ржЪ '{selected_batch_name}' рж╕ржлрж▓ржнрж╛ржмрзЗ ржорзБржЫрзЗ ржлрзЗрж▓рж╛ рж╣ржпрж╝рзЗржЫрзЗ!")
                    st.session_state.pop(f'confirm_delete_batch_{selected_batch_id}', None) # Reset confirmation
                    st.rerun()
                except Exception as e:
                    logger.error(f"Error deleting batch {selected_batch_id}: {str(e)}")
                    st.error(f"ржмрзНржпрж╛ржЪ ржорзБржЫрзЗ ржлрзЗрж▓рж╛рж░ рж╕ржоржпрж╝ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗ: {str(e)}")
            else:
                st.warning(f"ржЖржкржирж┐ ржХрж┐ ржирж┐рж╢рзНржЪрж┐ржд ржпрзЗ ржЖржкржирж┐ '{selected_batch_name}' ржмрзНржпрж╛ржЪржЯрж┐ ржорзБржЫрзЗ ржлрзЗрж▓рждрзЗ ржЪрж╛ржи? ржПржЗ ржмрзНржпрж╛ржЪрзЗрж░ рж╕ржорж╕рзНржд рж░рзЗржХрж░рзНржб ржорзБржЫрзЗ ржпрж╛ржмрзЗред")
                st.session_state[f'confirm_delete_batch_{selected_batch_id}'] = True
                st.button("рж╣рзНржпрж╛ржБ, ржЖржорж┐ ржирж┐рж╢рзНржЪрж┐ржд (ржмрзНржпрж╛ржЪ ржорзБржЫрзЗ ржлрзЗрж▓рзБржи)", type="danger", key=f"confirm_delete_batch_btn_{selected_batch_id}")

        # Option to clear entire database if there are batches but no files in selected one
        st.markdown("---")
        st.subheader("рж╕ржорзНржкрзВрж░рзНржг ржбрж╛ржЯрж╛ржмрзЗрж╕ ржорзНржпрж╛ржирзЗржЬржорзЗржирзНржЯ")
        if st.button("ЁЯФ┤ рж╕ржорзНржкрзВрж░рзНржг ржбрж╛ржЯрж╛ржмрзЗрж╕ ржорзБржЫрзЗ ржлрзЗрж▓рзБржи (рж╕рж╛ржмржзрж╛ржи!)", type="secondary", use_container_width=True):
            if st.session_state.get('confirm_clear_db', False):
                try:
                    # Delete all records first (which will also delete record_events due to CASCADE)
                    with db.conn.cursor() as cur:
                        cur.execute("DELETE FROM records")
                        cur.execute("DELETE FROM batches")
                        cur.execute("DELETE FROM events")
                    db.conn.commit()
                    st.success("тЬЕ рж╕ржорзНржкрзВрж░рзНржг ржбрж╛ржЯрж╛ржмрзЗрж╕ рж╕ржлрж▓ржнрж╛ржмрзЗ ржорзБржЫрзЗ ржлрзЗрж▓рж╛ рж╣ржпрж╝рзЗржЫрзЗ!")
                    st.session_state.pop('confirm_clear_db', None) # Reset confirmation
                    st.rerun()
                except Exception as e:
                    logger.error(f"Error clearing database: {str(e)}")
                    st.error(f"ржбрж╛ржЯрж╛ржмрзЗрж╕ ржорзБржЫрзЗ ржлрзЗрж▓рж╛рж░ рж╕ржоржпрж╝ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗ: {str(e)}")
            else:
                st.warning("ржЖржкржирж┐ ржХрж┐ ржирж┐рж╢рзНржЪрж┐ржд ржпрзЗ ржЖржкржирж┐ рж╕ржорзНржкрзВрж░рзНржг ржбрж╛ржЯрж╛ржмрзЗрж╕ ржорзБржЫрзЗ ржлрзЗрж▓рждрзЗ ржЪрж╛ржи? ржПржЗ ржХрзНрж░рж┐ржпрж╝рж╛ржЯрж┐ ржЕржкрж░рж┐ржмрж░рзНрждржирзАржпрж╝ред")
                st.session_state.confirm_clear_db = True
                st.button("рж╣рзНржпрж╛ржБ, ржЖржорж┐ ржирж┐рж╢рзНржЪрж┐ржд (рж╕ржорзНржкрзВрж░рзНржг ржорзБржЫрзЗ ржлрзЗрж▓рзБржи)", type="danger", key="confirm_clear_db_btn")

        return
        
    selected_file_name = st.selectbox(
        "ржлрж╛ржЗрж▓ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи",
        options=['рж╕ржм'] + [file['file_name'] for file in files],
        format_func=lambda x: f"ржлрж╛ржЗрж▓: {x}" if x != 'рж╕ржм' else "рж╕ржм ржлрж╛ржЗрж▓ ржжрзЗржЦрзБржи"
    )

    # --- Data Display and Editing ---
    if selected_file_name == 'рж╕ржм':
        records = db.get_batch_records(selected_batch_id)
    else:
        records = db.get_file_records(selected_batch_id, selected_file_name)

    if records:
        df = pd.DataFrame(records)
        st.write(f"ржорзЛржЯ рж░рзЗржХрж░рзНржб: {len(records)}")

        # Keep original df in session state for comparison
        if 'original_df' not in st.session_state:
            st.session_state.original_df = df.copy()

        edited_df = st.data_editor(
            df,
            column_config={
                'id': None, 'batch_id': None, 'file_name': None, 'created_at': None, 'batch_name': None,
                'ржХрзНрж░ржорж┐ржХ_ржиржВ': st.column_config.TextColumn('ржХрзНрж░ржорж┐ржХ ржиржВ', width="small"),
                'ржирж╛ржо': st.column_config.TextColumn('ржирж╛ржо', width="medium"),
                'ржнрзЛржЯрж╛рж░_ржиржВ': st.column_config.TextColumn('ржнрзЛржЯрж╛рж░ ржиржВ', width="medium"),
                'ржкрж┐рждрж╛рж░_ржирж╛ржо': st.column_config.TextColumn('ржкрж┐рждрж╛рж░ ржирж╛ржо', width="medium"),
                'ржорж╛рждрж╛рж░_ржирж╛ржо': st.column_config.TextColumn('ржорж╛рждрж╛рж░ ржирж╛ржо', width="medium"),
                'ржкрзЗрж╢рж╛': st.column_config.TextColumn('ржкрзЗрж╢рж╛'),
                'ржарж┐ржХрж╛ржирж╛': st.column_config.TextColumn('ржарж┐ржХрж╛ржирж╛', width="large"),
                'ржЬржирзНржо_рждрж╛рж░рж┐ржЦ': st.column_config.TextColumn('ржЬржирзНржо рждрж╛рж░рж┐ржЦ'),
                'phone_number': st.column_config.TextColumn('ржлрзЛржи ржиржорзНржмрж░'),
                'facebook_link': st.column_config.LinkColumn('ржлрзЗрж╕ржмрзБржХ рж▓рж┐ржЩрзНржХ'),
                'photo_link': st.column_config.ImageColumn('ржЫржмрж┐', help="ржЫржмрж┐рж░ рж▓рж┐ржЩрзНржХ ржжрж┐ржи"),
                'description': st.column_config.TextColumn('ржмрж┐ржмрж░ржг'),
                'relationship_status': st.column_config.SelectboxColumn(
                    'рж╕ржорзНржкрж░рзНржХрзЗрж░ ржзрж░ржг', options=['Regular', 'Friend', 'Enemy', 'Connected'], required=True
                ),
                'gender': st.column_config.SelectboxColumn( # Added gender column config
                    'рж▓рж┐ржЩрзНржЧ', options=['Male', 'Female', 'Other', ''], required=False # Allow empty string for not specified
                ),
                'events': st.column_config.ListColumn('ржирж┐рж░рзНржзрж╛рж░рж┐ржд ржЗржнрзЗржирзНржЯрж╕', help="ржПржЗ рж░рзЗржХрж░рзНржбрзЗрж░ ржЬржирзНржп ржирж┐рж░рзНржзрж╛рж░рж┐ржд ржЗржнрзЗржирзНржЯ (s)", width="medium")
            },
            hide_index=True,
            use_container_width=True,
            key="data_editor"
        )

        # --- Action Buttons ---
        col1, col2, col3 = st.columns([2, 2, 5])

        with col1:
            if st.button("ЁЯТ╛ ржкрж░рж┐ржмрж░рзНрждржи рж╕ржВрж░ржХрзНрж╖ржг", type="primary", use_container_width=True):
                try:
                    original_df = st.session_state.original_df
                    editable_cols = [
                        'ржХрзНрж░ржорж┐ржХ_ржиржВ', 'ржирж╛ржо', 'ржнрзЛржЯрж╛рж░_ржиржВ', 'ржкрж┐рждрж╛рж░_ржирж╛ржо', 'ржорж╛рждрж╛рж░_ржирж╛ржо', 'ржкрзЗрж╢рж╛', 
                        'ржарж┐ржХрж╛ржирж╛', 'ржЬржирзНржо_рждрж╛рж░рж┐ржЦ', 'phone_number', 'facebook_link', 
                        'photo_link', 'description', 'relationship_status', 'gender' # Added gender here
                    ]
                    changes = edited_df[editable_cols].compare(original_df[editable_cols])
                    
                    if not changes.empty:
                        updated_count = 0
                        for idx in changes.index:
                            record_id = int(original_df.loc[idx, 'id'])
                            updated_data = edited_df.loc[idx].to_dict()
                            db.update_record(record_id, updated_data)
                            updated_count += 1
                        st.success(f"{updated_count} ржЯрж┐ рж░рзЗржХрж░рзНржбрзЗрж░ ржкрж░рж┐ржмрж░рзНрждржи рж╕ржлрж▓ржнрж╛ржмрзЗ рж╕ржВрж░ржХрзНрж╖рж┐ржд рж╣ржпрж╝рзЗржЫрзЗ!")
                        st.session_state.original_df = edited_df.copy() # Update session state
                        st.rerun()
                    else:
                        st.info("ржХрзЛржирзЛ ржкрж░рж┐ржмрж░рзНрждржи рж╕ржирж╛ржХрзНржд ржХрж░рж╛ ржпрж╛ржпрж╝ржирж┐ред")
                except Exception as e:
                    logger.error(f"Update error: {str(e)}")
                    st.error(f"ржкрж░рж┐ржмрж░рзНрждржи рж╕ржВрж░ржХрзНрж╖ржгрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗ: {str(e)}")
        
        with col2:
            popover = st.popover("ЁЯЧУя╕П ржЗржнрзЗржирзНржЯ ржирж┐рж░рзНржзрж╛рж░ржг ржХрж░рзБржи", use_container_width=True)
            with popover:
                st.markdown("##### ржПржХржЯрж┐ рж░рзЗржХрж░рзНржбрзЗ ржПржХ ржмрж╛ ржПржХрж╛ржзрж┐ржХ ржЗржнрзЗржирзНржЯ ржирж┐рж░рзНржзрж╛рж░ржг ржХрж░рзБржи")
                all_events = db.get_all_events()
                event_map = {event['name']: event['id'] for event in all_events}
                
                record_options = {f"{rec['ржХрзНрж░ржорж┐ржХ_ржиржВ']}: {rec['ржирж╛ржо']}": rec['id'] for rec in records}
                selected_record_display = st.selectbox(
                    "рж░рзЗржХрж░рзНржб ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи",
                    options=record_options.keys(),
                    key="event_record_selector"
                )

                if selected_record_display:
                    selected_record_id = record_options[selected_record_display]
                    assigned_events_names = db.get_events_for_record(selected_record_id)

                    selected_events = st.multiselect(
                        "ржирж┐рж░рзНржзрж╛рж░ржг ржХрж░рж╛рж░ ржЬржирзНржп ржЗржнрзЗржирзНржЯ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи",
                        options=event_map.keys(),
                        default=assigned_events_names,
                        key="event_multiselect"
                    )

                    if st.button("тЬЕ ржЗржнрзЗржирзНржЯ ржЖржкржбрзЗржЯ ржХрж░рзБржи", type="primary"):
                        try:
                            selected_event_ids = [event_map[name] for name in selected_events]
                            db.assign_events_to_record(selected_record_id, selected_event_ids)
                            st.success(f"рж░рзЗржХрж░рзНржб '{selected_record_display}' ржПрж░ ржЬржирзНржп ржЗржнрзЗржирзНржЯ рж╕ржлрж▓ржнрж╛ржмрзЗ ржЖржкржбрзЗржЯ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред")
                            st.rerun()
                        except Exception as e:
                            logger.error(f"Event assignment error: {e}")
                            st.error("ржЗржнрзЗржирзНржЯ ржирж┐рж░рзНржзрж╛рж░ржгрзЗрж░ рж╕ржоржпрж╝ ржПржХржЯрж┐ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗред")

    else:
        st.info("ржПржЗ ржлрж╛ржЗрж▓ ржмрж╛ ржмрзНржпрж╛ржЪрзЗ ржХрзЛржи рж░рзЗржХрж░рзНржб ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред")

    st.markdown("---")
    st.subheader("ржбрзЗржЯрж╛ржмрзЗрж╕ ржорзНржпрж╛ржирзЗржЬржорзЗржирзНржЯ")

    # Delete specific batch button
    if selected_batch_name and selected_batch_name != 'рж╕ржм ржмрзНржпрж╛ржЪ':
        if st.button(f"ЁЯЧСя╕П '{selected_batch_name}' ржмрзНржпрж╛ржЪ ржорзБржЫрзЗ ржлрзЗрж▓рзБржи", type="secondary", use_container_width=True):
            if st.session_state.get(f'confirm_delete_batch_{selected_batch_id}', False):
                try:
                    db.delete_batch(selected_batch_id)
                    st.success(f"тЬЕ ржмрзНржпрж╛ржЪ '{selected_batch_name}' рж╕ржлрж▓ржнрж╛ржмрзЗ ржорзБржЫрзЗ ржлрзЗрж▓рж╛ рж╣ржпрж╝рзЗржЫрзЗ!")
                    st.session_state.pop(f'confirm_delete_batch_{selected_batch_id}', None) # Reset confirmation
                    st.rerun()
                except Exception as e:
                    logger.error(f"Error deleting batch {selected_batch_id}: {str(e)}")
                    st.error(f"ржмрзНржпрж╛ржЪ ржорзБржЫрзЗ ржлрзЗрж▓рж╛рж░ рж╕ржоржпрж╝ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗ: {str(e)}")
            else:
                st.warning(f"ржЖржкржирж┐ ржХрж┐ ржирж┐рж╢рзНржЪрж┐ржд ржпрзЗ ржЖржкржирж┐ '{selected_batch_name}' ржмрзНржпрж╛ржЪржЯрж┐ ржорзБржЫрзЗ ржлрзЗрж▓рждрзЗ ржЪрж╛ржи? ржПржЗ ржмрзНржпрж╛ржЪрзЗрж░ рж╕ржорж╕рзНржд рж░рзЗржХрж░рзНржб ржорзБржЫрзЗ ржпрж╛ржмрзЗред")
                st.session_state[f'confirm_delete_batch_{selected_batch_id}'] = True
                st.button("рж╣рзНржпрж╛ржБ, ржЖржорж┐ ржирж┐рж╢рзНржЪрж┐ржд (ржмрзНржпрж╛ржЪ ржорзБржЫрзЗ ржлрзЗрж▓рзБржи)", type="danger", key=f"confirm_delete_batch_btn_{selected_batch_id}")
    else:
        st.info("ржПржХржЯрж┐ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржмрзНржпрж╛ржЪ ржорзБржЫрзЗ ржлрзЗрж▓рж╛рж░ ржЬржирзНржп, ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЙржкрж░рзЗ ржПржХржЯрж┐ ржмрзНржпрж╛ржЪ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржиред")


    # Clear entire database button
    if st.button("ЁЯФ┤ рж╕ржорзНржкрзВрж░рзНржг ржбрж╛ржЯрж╛ржмрзЗрж╕ ржорзБржЫрзЗ ржлрзЗрж▓рзБржи (рж╕рж╛ржмржзрж╛ржи!)", type="secondary", use_container_width=True):
        if st.session_state.get('confirm_clear_db', False):
            try:
                # Delete all records first (which will also delete record_events due to CASCADE)
                with db.conn.cursor() as cur:
                    cur.execute("DELETE FROM records")
                    cur.execute("DELETE FROM batches")
                    cur.execute("DELETE FROM events")
                db.conn.commit()
                st.success("тЬЕ рж╕ржорзНржкрзВрж░рзНржг ржбрж╛ржЯрж╛ржмрзЗрж╕ рж╕ржлрж▓ржнрж╛ржмрзЗ ржорзБржЫрзЗ ржлрзЗрж▓рж╛ рж╣ржпрж╝рзЗржЫрзЗ!")
                st.session_state.pop('confirm_clear_db', None) # Reset confirmation
                st.rerun()
            except Exception as e:
                logger.error(f"Error clearing database: {str(e)}")
                st.error(f"ржбрж╛ржЯрж╛ржмрзЗрж╕ ржорзБржЫрзЗ ржлрзЗрж▓рж╛рж░ рж╕ржоржпрж╝ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗ: {str(e)}")
        else:
            st.warning("ржЖржкржирж┐ ржХрж┐ ржирж┐рж╢рзНржЪрж┐ржд ржпрзЗ ржЖржкржирж┐ рж╕ржорзНржкрзВрж░рзНржг ржбрж╛ржЯрж╛ржмрзЗрж╕ ржорзБржЫрзЗ ржлрзЗрж▓рждрзЗ ржЪрж╛ржи? ржПржЗ ржХрзНрж░рж┐ржпрж╝рж╛ржЯрж┐ ржЕржкрж░рж┐ржмрж░рзНрждржирзАржпрж╝ред")
            st.session_state.confirm_clear_db = True
            st.button("рж╣рзНржпрж╛ржБ, ржЖржорж┐ ржирж┐рж╢рзНржЪрж┐ржд (рж╕ржорзНржкрзВрж░рзНржг ржорзБржЫрзЗ ржлрзЗрж▓рзБржи)", type="danger", key="confirm_clear_db_btn")


if __name__ == "__main__":
    all_data_page()
