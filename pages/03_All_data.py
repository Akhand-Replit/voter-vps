import streamlit as st
import pandas as pd
import numpy as np
from utils.database import Database
from utils.styling import apply_custom_styling
import logging

logger = logging.getLogger(__name__)
apply_custom_styling()

def all_data_page():
    if 'authenticated' not in st.session_state or not st.session_state.authenticated:
        st.warning("‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶≤‡¶ó‡¶á‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®")
        return

    st.title("üìÅ ‡¶∏‡¶¨ ‡¶§‡¶•‡ßç‡¶Ø")

    db = Database()
    batches = db.get_all_batches()

    if not batches:
        st.info("‡¶ï‡ßã‡¶® ‡¶°‡¶æ‡¶ü‡¶æ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø")
        return

    # --- Session State Initialization ---
    if 'confirm_delete_all' not in st.session_state:
        st.session_state.confirm_delete_all = False
    if 'confirm_delete_batch' not in st.session_state:
        st.session_state.confirm_delete_batch = None
    if 'confirm_delete_file' not in st.session_state:
        st.session_state.confirm_delete_file = None

    # --- Header and Deletion Section ---
    col1, col2 = st.columns([5, 1])
    with col2:
        if st.button("‡¶∏‡¶¨ ‡¶°‡¶æ‡¶ü‡¶æ ‡¶Æ‡ßÅ‡¶õ‡ßÅ‡¶®", type="secondary"):
            st.session_state.confirm_delete_all = True

    if st.session_state.confirm_delete_all:
        st.warning("‚ö†Ô∏è ‡¶∏‡¶§‡¶∞‡ßç‡¶ï‡¶§‡¶æ! ‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡¶ø ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶Ø‡ßá ‡¶Ü‡¶™‡¶®‡¶ø ‡¶∏‡¶Æ‡¶∏‡ßç‡¶§ ‡¶°‡ßá‡¶ü‡¶æ ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶§‡ßá ‡¶ö‡¶æ‡¶®? ‡¶è‡¶á ‡¶ï‡¶æ‡¶ú‡¶ü‡¶ø ‡¶Ö‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®‡ßÄ‡¶Ø‡¶º!")
        confirm_col1, confirm_col2 = st.columns(2)
        with confirm_col1:
            if st.button("‡¶π‡ßç‡¶Ø‡¶æ‡¶Å, ‡¶∏‡¶¨ ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡ßÅ‡¶®", type="primary", use_container_width=True):
                db.clear_all_data()
                st.success("‚úÖ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶§ ‡¶°‡ßá‡¶ü‡¶æ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá")
                st.session_state.confirm_delete_all = False
                st.rerun()
        with confirm_col2:
            if st.button("‡¶®‡¶æ, ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡ßÅ‡¶®", type="secondary", use_container_width=True):
                st.session_state.confirm_delete_all = False
                st.rerun()

    # --- Batch and File Selection ---
    with col1:
        selected_batch_name = st.selectbox(
            "‡¶¨‡ßç‡¶Ø‡¶æ‡¶ö ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®",
            options=[batch['name'] for batch in batches],
            format_func=lambda x: f"‡¶¨‡ßç‡¶Ø‡¶æ‡¶ö: {x}"
        )
    
    selected_batch_id = next(b['id'] for b in batches if b['name'] == selected_batch_name)
    files = db.get_batch_files(selected_batch_id)

    if not files:
        st.info("‡¶è‡¶á ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ö‡ßá ‡¶ï‡ßã‡¶® ‡¶´‡¶æ‡¶á‡¶≤ ‡¶®‡ßá‡¶á")
        return
        
    selected_file_name = st.selectbox(
        "‡¶´‡¶æ‡¶á‡¶≤ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®",
        options=['‡¶∏‡¶¨'] + [file['file_name'] for file in files],
        format_func=lambda x: f"‡¶´‡¶æ‡¶á‡¶≤: {x}" if x != '‡¶∏‡¶¨' else "‡¶∏‡¶¨ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®"
    )

    # --- Data Display and Editing ---
    if selected_file_name == '‡¶∏‡¶¨':
        records = db.get_batch_records(selected_batch_id)
    else:
        records = db.get_file_records(selected_batch_id, selected_file_name)

    if records:
        df = pd.DataFrame(records)
        st.write(f"‡¶Æ‡ßã‡¶ü ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶°: {len(records)}")

        # Keep original df in session state for comparison
        st.session_state.original_df = df.copy()

        edited_df = st.data_editor(
            df,
            column_config={
                'id': None, 'batch_id': None, 'file_name': None, 'created_at': None, 'batch_name': None,
                '‡¶ï‡ßç‡¶∞‡¶Æ‡¶ø‡¶ï_‡¶®‡¶Ç': st.column_config.TextColumn('‡¶ï‡ßç‡¶∞‡¶Æ‡¶ø‡¶ï ‡¶®‡¶Ç', width="small"),
                '‡¶®‡¶æ‡¶Æ': st.column_config.TextColumn('‡¶®‡¶æ‡¶Æ', width="medium"),
                '‡¶≠‡ßã‡¶ü‡¶æ‡¶∞_‡¶®‡¶Ç': st.column_config.TextColumn('‡¶≠‡ßã‡¶ü‡¶æ‡¶∞ ‡¶®‡¶Ç', width="medium"),
                '‡¶™‡¶ø‡¶§‡¶æ‡¶∞_‡¶®‡¶æ‡¶Æ': st.column_config.TextColumn('‡¶™‡¶ø‡¶§‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ', width="medium"),
                '‡¶Æ‡¶æ‡¶§‡¶æ‡¶∞_‡¶®‡¶æ‡¶Æ': st.column_config.TextColumn('‡¶Æ‡¶æ‡¶§‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ', width="medium"),
                '‡¶™‡ßá‡¶∂‡¶æ': st.column_config.TextColumn('‡¶™‡ßá‡¶∂‡¶æ'),
                '‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ': st.column_config.TextColumn('‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ', width="large"),
                '‡¶ú‡¶®‡ßç‡¶Æ_‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ': st.column_config.TextColumn('‡¶ú‡¶®‡ßç‡¶Æ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ'),
                'phone_number': st.column_config.TextColumn('‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞'),
                'facebook_link': st.column_config.LinkColumn('‡¶´‡ßá‡¶∏‡¶¨‡ßÅ‡¶ï ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï'),
                'photo_link': st.column_config.ImageColumn('‡¶õ‡¶¨‡¶ø', help="‡¶õ‡¶¨‡¶ø‡¶∞ ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶¶‡¶ø‡¶®"),
                'description': st.column_config.TextColumn('‡¶¨‡¶ø‡¶¨‡¶∞‡¶£'),
                'relationship_status': st.column_config.SelectboxColumn(
                    '‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡ßá‡¶∞ ‡¶ß‡¶∞‡¶£', options=['Regular', 'Friend', 'Enemy', 'Connected'], required=True
                ),
                'events': st.column_config.ListColumn('‡¶á‡¶≠‡ßá‡¶®‡ßç‡¶ü‡¶∏', help="‡¶è‡¶á ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶°‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶®‡¶ø‡¶∞‡ßç‡¶ß‡¶æ‡¶∞‡¶ø‡¶§ ‡¶á‡¶≠‡ßá‡¶®‡ßç‡¶ü")
            },
            hide_index=True,
            use_container_width=True,
            key="data_editor"
        )

        if st.button("‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶°‡ßá‡¶∞ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®‡¶ó‡ßÅ‡¶≤‡¶ø ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶®", type="primary"):
            try:
                original_df = st.session_state.original_df
                # Compare only editable columns
                editable_cols = [
                    '‡¶ï‡ßç‡¶∞‡¶Æ‡¶ø‡¶ï_‡¶®‡¶Ç', '‡¶®‡¶æ‡¶Æ', '‡¶≠‡ßã‡¶ü‡¶æ‡¶∞_‡¶®‡¶Ç', '‡¶™‡¶ø‡¶§‡¶æ‡¶∞_‡¶®‡¶æ‡¶Æ', '‡¶Æ‡¶æ‡¶§‡¶æ‡¶∞_‡¶®‡¶æ‡¶Æ', '‡¶™‡ßá‡¶∂‡¶æ', 
                    '‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ', '‡¶ú‡¶®‡ßç‡¶Æ_‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ', 'phone_number', 'facebook_link', 
                    'photo_link', 'description', 'relationship_status'
                ]
                changes = edited_df[editable_cols].compare(original_df[editable_cols])
                
                if not changes.empty:
                    updated_count = 0
                    for idx in changes.index:
                        record_id = int(original_df.loc[idx, 'id'])
                        updated_data = edited_df.loc[idx].to_dict()
                        db.update_record(record_id, updated_data)
                        updated_count += 1
                    st.success(f"{updated_count} ‡¶ü‡¶ø ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶°‡ßá‡¶∞ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶ø‡¶§ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!")
                    st.rerun()
                else:
                    st.info("‡¶ï‡ßã‡¶®‡ßã ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶∏‡¶®‡¶æ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§")
            except Exception as e:
                logger.error(f"Update error: {str(e)}")
                st.error(f"‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá: {str(e)}")
    else:
        st.info("‡¶ï‡ßã‡¶® ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶° ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø")

    # --- Assign Events Section ---
    st.markdown("---")
    st.subheader("üë• ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶°‡ßá ‡¶á‡¶≠‡ßá‡¶®‡ßç‡¶ü ‡¶®‡¶ø‡¶∞‡ßç‡¶ß‡¶æ‡¶∞‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶®")

    if records:
        all_events = db.get_all_events()
        event_map = {event['name']: event['id'] for event in all_events}
        
        # Let user select a record from the displayed list
        record_options = {f"{rec['‡¶ï‡ßç‡¶∞‡¶Æ‡¶ø‡¶ï_‡¶®‡¶Ç']}: {rec['‡¶®‡¶æ‡¶Æ']}": rec['id'] for rec in records}
        selected_record_display = st.selectbox(
            "‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶° ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®",
            options=record_options.keys()
        )

        if selected_record_display:
            selected_record_id = record_options[selected_record_display]
            
            # Get currently assigned events for the selected record
            assigned_events_names = db.get_events_for_record(selected_record_id)

            # Multiselect for choosing events
            selected_events = st.multiselect(
                "‡¶®‡¶ø‡¶∞‡ßç‡¶ß‡¶æ‡¶∞‡¶£ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶á‡¶≠‡ßá‡¶®‡ßç‡¶ü ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®",
                options=event_map.keys(),
                default=assigned_events_names
            )

            if st.button("‡¶á‡¶≠‡ßá‡¶®‡ßç‡¶ü ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®", type="primary"):
                try:
                    selected_event_ids = [event_map[name] for name in selected_events]
                    db.assign_events_to_record(selected_record_id, selected_event_ids)
                    st.success(f"‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶° '{selected_record_display}' ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶á‡¶≠‡ßá‡¶®‡ßç‡¶ü ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")
                    st.rerun()
                except Exception as e:
                    logger.error(f"Event assignment error: {e}")
                    st.error("‡¶á‡¶≠‡ßá‡¶®‡ßç‡¶ü ‡¶®‡¶ø‡¶∞‡ßç‡¶ß‡¶æ‡¶∞‡¶£‡ßá‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")

if __name__ == "__main__":
    all_data_page()
